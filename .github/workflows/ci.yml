name: SerenMind CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # =========================================
  # Backend - Lint, Test, Build
  # =========================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_pass
          MYSQL_DATABASE: serenmind_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P3306 -utest_user -ptest_pass --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Run unit tests
        working-directory: ./backend
        run: ./mvnw test -Dspring.profiles.active=test

      - name: Run integration tests
        working-directory: ./backend
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/serenmind_test
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_pass
          JWT_SECRET: test-secret-key-for-ci-pipeline-at-least-256-bits-long
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci-pipeline-at-least-256-bits
        run: ./mvnw verify -Dspring.profiles.active=test

      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Backend Test Results
          path: backend/target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: backend/target/surefire-reports/

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: backend-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        working-directory: ./backend
        run: ./mvnw clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar
          retention-days: 7

  # =========================================
  # Frontend - Lint, Test, Build
  # =========================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint

      - name: Type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run tests
        working-directory: ./frontend
        run: npm test

      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Frontend Test Results
          path: frontend/test-results/*.xml
          reporter: jest-junit

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: frontend-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:8080/api' }}
          VITE_APP_NAME: SerenMind
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

  # =========================================
  # Security Scanning
  # =========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =========================================
  # Docker - Build & Push Images
  # =========================================
  docker-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: backend-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  docker-frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: frontend-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}

  # =========================================
  # Deploy to Staging (Optional)
  # =========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-backend, docker-frontend]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.serenmind.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend to Render
        if: secrets.RENDER_DEPLOY_HOOK_BACKEND != ''
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_BACKEND }}

      - name: Deploy frontend to Vercel
        if: secrets.VERCEL_TOKEN != ''
        working-directory: ./frontend
        run: |
          npm i -g vercel
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ secrets.STAGING_BACKEND_URL }}/actuator/health || exit 1
          curl -f ${{ secrets.STAGING_FRONTEND_URL }} || exit 1

  # =========================================
  # Notification
  # =========================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, backend-build, frontend-build]
    if: always()

    steps:
      - name: Check job status
        id: check
        run: |
          if [ "${{ needs.backend-test.result }}" == "failure" ] || \
             [ "${{ needs.frontend-test.result }}" == "failure" ] || \
             [ "${{ needs.backend-build.result }}" == "failure" ] || \
             [ "${{ needs.frontend-build.result }}" == "failure" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: secrets.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.check.outputs.status }}
          text: |
            CI/CD Pipeline: ${{ steps.check.outputs.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
